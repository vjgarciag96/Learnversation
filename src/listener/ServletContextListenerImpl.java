package listener;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Logger;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

import util.PasswordEncryptation;

/*
 * 
 */
@WebListener
public class ServletContextListenerImpl implements ServletContextListener{

	private static final Logger logger = Logger.getLogger(ServletContextListenerImpl.class.getName());

	public ServletContextListenerImpl() {
    }
	
	@Override
	public void contextInitialized(ServletContextEvent event) {
		logger.info("Creating DB");
		Connection conn = null;
		
		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			logger.warning("Error al cargar el driver de hsqldb : "+e.toString());
		}

		try {
			
			ServletContext servletContext = event.getServletContext();
			
			conn = DriverManager.getConnection("jdbc:hsqldb:file:" + servletContext.getRealPath("WEB-INF/learnversationdb/"),
													"sa", // username
													""); //password

			Statement stmt = conn.createStatement();
			
			//Init db schema
			try{
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS ProfileImage(IDI INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ "IMAGENAME VARCHAR(32) NOT NULL)");
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Level(IDLV INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ " LEVELNAME VARCHAR(6) NOT NULL)");
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Country(IDCOUNTRY INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ " COUNTRYNAME VARCHAR(32) NOT NULL)");
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS User (IDU INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ "USERNAME VARCHAR(18) UNIQUE NOT NULL, "
						+ "PASSWORD VARCHAR(64) NOT NULL, "
						+ "EMAIL VARCHAR(50) NOT NULL, "
						+ "GENDER VARCHAR(10) NOT NULL, "
						+ "BIRTHDATE VARCHAR(10), "
						+ "COUNTRY VARCHAR(30), "
						+ "EXCHANGETYPES VARCHAR(50), "
						+ "IDI INTEGER DEFAULT 0, "
						+ "FOREIGN KEY (IDI) REFERENCES PROFILEIMAGE(IDI) ON DELETE CASCADE)");
				
				logger.info("User");
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Language (IDL INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ "LANGNAME VARCHAR(18) NOT NULL) " );
				
				logger.info("Language");

				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Users_Languages ("
						+ "IDU INTEGER NOT NULL, "
						+ "IDL INTEGER NOT NULL, "
						+ "WRITINGLEVEL INTEGER NOT NULL, "
						+ "SPEAKINGLEVEL INTEGER NOT NULL, "
						+ "LISTENINGLEVEL INTEGER NOT NULL, "
						+ "READINGLEVEL INTEGER NOT NULL, "
						+ "PRIMARY KEY(IDU,IDL), "
						+ "FOREIGN KEY (IDU) REFERENCES USER(IDU) ON DELETE CASCADE, "
						+ "FOREIGN KEY (IDL) REFERENCES LANGUAGE(IDL) ON DELETE CASCADE,"
						+ "FOREIGN KEY (WRITINGLEVEL) REFERENCES LEVEL(IDLV) ON DELETE CASCADE,"
						+ "FOREIGN KEY (SPEAKINGLEVEL) REFERENCES LEVEL(IDLV) ON DELETE CASCADE,"
						+ "FOREIGN KEY (LISTENINGLEVEL) REFERENCES LEVEL(IDLV) ON DELETE CASCADE,"
						+ "FOREIGN KEY (READINGLEVEL) REFERENCES LEVEL(IDLV) ON DELETE CASCADE)");
				
				logger.info("Users_Languages");
				
				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Comment (IDC INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
						+ "SENDER INTEGER NOT NULL, "
						+ "RECEIVER INTEGER NOT NULL, "
						+ "TIMESTAMP TIMESTAMP,"
						+ "TEXT  VARCHAR(400) NOT NULL, "
						+ "FOREIGN KEY (SENDER) REFERENCES USER(IDU) ON DELETE CASCADE," 
						+ "FOREIGN KEY (RECEIVER) REFERENCES USER(IDU) ON DELETE CASCADE)" );			
				logger.info("Comments");
				
			}catch(SQLException e) {
				e.printStackTrace();
				logger.info("SQL Excetion"+e.toString());
			}
			
			//init data
			//Inserción de imágenes
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 0, 'profileImage0.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=0 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 1, 'profileImage1.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=1 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 2, 'profileImage2.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=2 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 3, 'profileImage3.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=3 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 4, 'profileImage4.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=4 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 5, 'profileImage5.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=5 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 6, 'profileImage6.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=6 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 7, 'profileImage7.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=7 )  LIMIT 1");
			stmt.executeUpdate("INSERT INTO ProfileImage (idi, imagename) SELECT 8, 'profileImage8.jpg' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from ProfileImage where idi=8 )  LIMIT 1");

			stmt.executeUpdate("INSERT INTO User (username, password, email, "
					+ "gender, birthdate, exchangetypes, country, idi) "
					+ "SELECT 'Darth', '"+PasswordEncryptation.sha256("SOLO1234")
					+ "', 'darth.vader@darksideoftheforce.org', "
					+ "'Hombre', '1995-02-11', 'Cara a cara, A través de internet', 'España', 0 FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE not exists (select  * from User where "
					+ "username='Darth')  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO User (username, password, email, "
					+ "gender, birthdate, exchangetypes, country, idi) "
					+ "SELECT 'Leia', '"+PasswordEncryptation.sha256("ORGANA1234")
					+ "', 'leia@darksideoftheforce.org', "
					+ "'Mujer', '1996-12-16', 'Cara a cara', 'Portugal', 1 FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE not exists (select  * from User where "
					+ "username='Leia')  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO User (username, password, email, "
					+ "gender, birthdate, exchangetypes, country, idi) "
					+ "SELECT 'Bart', '"+PasswordEncryptation.sha256("ELBARTO16")
					+ "', 'bart@unex.es', "
					+ "'Hombre', '1996-09-23', 'A través de internet', 'Inglaterra', 3 FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE not exists (select  * from User where "
					+ "username='Bart')  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO User (username, password, email, "
					+ "gender, birthdate, exchangetypes, country, idi) "
					+ "SELECT 'Homer', '"+PasswordEncryptation.sha256("HOMER1")
					+ "', 'homer@unex.es', "
					+ "'Hombre', '1990-11-22', '', 'China', 6 FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE not exists (select  * from User where "
					+ "username='Homer')  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO User (username, password, email, "
					+ "gender, birthdate, exchangetypes, country, idi) "
					+ "SELECT 'Apu', '"+PasswordEncryptation.sha256("APU1986")
					+ "', 'apu@unex.es', "
					+ "'Hombre', '1986-06-23', 'Cara a cara', 'Francia', 1 FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE not exists (select  * from User where "
					+ "username='Apu')  LIMIT 1");
			
			//Inserción de los idiomas
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Inglés' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Inglés')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Español' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Español')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Francés' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Francés')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Alemán' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Alemán')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Portugués' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Portugués')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Chino' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Chino')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Árabe' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Árabe')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Japonés' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Japonés')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Ruso' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Ruso')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Language (langname) SELECT 'Italiano' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Italiano')  LIMIT 1");
			
			//Inserción de los niveles
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'A1' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='A1')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'A2' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='A2')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'B1' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='B1')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'B2' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='B2')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'C1' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='C1')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'C2' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='C2')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Level (levelname) SELECT 'Nativo' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Level where levelname='Nativo')  LIMIT 1");
			
			//Inserción de los paises
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'España' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='España')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'Francia' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='Francia')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'Portugal' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='Portugal')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'Inglaterra' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='Inglaterra')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'EEUU' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='EEUU')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'China' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='China')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'Rusia' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='Rusia')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'Italia' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='Italia')  LIMIT 1");
			stmt.executeUpdate("INSERT INTO Country (countryName) SELECT 'Japón' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Country where countryName='Japón')  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 0,0,0,0,0,0"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=0 and idl=0)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 0,3,3,3,3,3"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=0 and idl=3)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 0,5,6,6,6,6"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=0 and idl=5)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 1,7,5,5,5,5"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=1 and idl=7)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 1,3,2,2,2,2"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=1 and idl=3)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 2,4,4,4,4,3"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=2 and idl=4)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 2,5,1,2,2,3"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=2 and idl=5)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 3,1,4,3,3,3"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=3 and idl=1)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 3,8,3,3,2,1"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=3 and idl=8)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 4,9,1,1,2,3"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=4 and idl=9)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 4,8,1,2,2,2"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=4 and idl=8)  LIMIT 1");
			
			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,speakingLevel,writingLevel,listeningLevel,readingLevel)"
					+ "SELECT 4,7,3,3,3,4"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=4 and idl=7)  LIMIT 1");
			
			
			String timeStamp = null;
			timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
			
			stmt.executeUpdate(
					"INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " +
					"SELECT 1," +
					"0,'" +
					timeStamp+ "'," + 
					"'I would like to speak with you in Spanish and English via Skype' " +  //extra los medios de comunicaci�n
					"FROM INFORMATION_SCHEMA.TABLES " + 
					"WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 0) LIMIT 1");
			
			timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
			
			stmt.executeUpdate(
					"INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " +
					"SELECT 0," +
					"1,'" +
					timeStamp + "'," + 
					"'Ok, write me a message via Skype, mi user is @vader' " +
					"FROM INFORMATION_SCHEMA.TABLES " + 
					"WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 1) LIMIT 1");
			
			timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
			
			stmt.executeUpdate(
					"INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " +
					"SELECT 2," +
					"4,'" +
					timeStamp + "'," + 
					"'I would like to write you in Chinese and Japanese via email' " +
					"FROM INFORMATION_SCHEMA.TABLES " + 
					"WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 2) LIMIT 1");
			
			timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
			
			stmt.executeUpdate(
					"INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " +
					"SELECT 4," +
					"2,'" +
					timeStamp + "'," + 
					"'Ok, write me to the email of my profile' " +
					"FROM INFORMATION_SCHEMA.TABLES " + 
					"WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 3) LIMIT 1");

					servletContext.setAttribute("dbConn", conn);
			
		} catch (SQLException e) {
			e.printStackTrace();
			logger.info("SQLException"+e.toString());
		}                     
		
		logger.info("DB created");
	}

	@Override
	public void contextDestroyed(ServletContextEvent event) {
		logger.info("Destroying DB");
		try {
			logger.info("DB shutdown start");
	   		ServletContext servletContext = event.getServletContext();
	   		Connection conn = (Connection) servletContext.getAttribute("dbConn");
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("SHUTDOWN");
			conn.close();
			Enumeration<Driver> drivers = DriverManager.getDrivers();
			while (drivers.hasMoreElements()) {
				logger.info("DB deregistering drivers");
				Driver driver = drivers.nextElement();
				try {
					DriverManager.deregisterDriver(driver);
					logger.info(String.format("deregistering jdbc driver: %s", driver));
				} catch (SQLException e) {
					logger.severe(String.format("Error deregistering driver %s %s", driver, e));
				}

			}

		} catch (SQLException e) {
			logger.warning("Error al cerrar la conexión con la bd :"+e.toString());
		}
		
		logger.info("DB destroyed");
	}

}
